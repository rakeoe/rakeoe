{"name":"RakeOE","tagline":"Rake Optimized for Embedded. A build system for test driven Embedded C/C++ Development","body":"# Rake Optimized for Embedded\r\n\r\n**A build system for test driven Embedded C/C++ Development based on Ruby rake**\r\n\r\nRakeOE is a build system for application development. It can parse OpenEmbedded / Yocto environment files.<br/>\r\nIn this way it knows how to cross compile in whatever target platform the cross compiler builds.<br/>\r\nIt uses automatically the appropriate include paths and libraries of the given platform.<br/>\r\nIf not otherwise specified, it uses the native toolchain of the host platform.<br/>\r\n\r\nRakeOE uses a *convention over configuration* paradigm to enable a fast jump start for developers.<br/>\r\nE.g. it assumes that the project follows a certain directory hierarchy or how sub projects are organized.<br/>\r\nMoreover it bundles the unit test framework CppUTest to enable TDD.\r\n\r\nIt is possible to override these default settings, though one can get a long way without doing so.<br/>\r\nMore of that below.\r\n\r\n## Prerequisites\r\n### OS\r\nAt minimum a Unix-flavored OS is required. E.g. Linux, OS-X, SUN OS, etc.<br/>\r\n\r\nFor the time beeing, **gcc** or a gcc-compatible compiler like **clang** or **icc** is required.<br/>\r\nIf one wants to cross compile for other target platforms via Yocto/OpenEmbedded, Linux is a must.<br/>\r\nRakeOE has been tested on Ubunu 12.04. It should run on other Linux distros as well. \r\n\r\nIt is also possible to run RakeOE on windows. One has to create a new toolchain definition in rake/toolchain and make path styles Windows-compatible.\r\n\r\n### Gcc compatiple compiler\r\nBesides compilation, gcc is used e.g. for header file dependency generation or platform information.\r\n\r\n### Ruby\r\nRakeOE is based on Rake. Rake comes bundled with Ruby. Therefore you should have installed a recent [Ruby version](http://www.ruby-lang.org/en/ \"[Latest Ruby\") on your development machine.<br/>\r\nRecommended is **Ruby >= 1.9.3**.\r\n\r\n### OpenEmbedded / Yocto\r\nIf you want to use RakeOE for cross development, you should also have some flavour of OpenEmbedded installed on your host platform.<br/>\r\nRakeOE has been tested with [ELDK-5.3/Yocto Danny](http://www.denx.de/wiki/ELDK-5/ \"[ELDK-5.3/Yocto Danny\") but other OpenEmbedded based toolchains should work similarly well.<br/>\r\nIf you only want to use RakeOE for native development, this is not needed.\r\n\r\n## Additional Features\r\n### Subproject autodiscovery\r\nAny subdirectory inside the configured source directories will be scanned for a **prj.rake** file. This file contains standardized settings<br/>\r\nfor building libraries or applications and defining dependencies. Any subproject that has such a prj.rake file will be automatically<br/>\r\npicked up for building.\r\n\r\n### Qt\r\nRakeOE has built-in support for Qt. It will automatically parse header files in Qt enabled sub projects and run the moc compiler <br/>\r\non them if a **Q_OBJECT** declaration is encountered.\r\n\r\n### Subproject specific settings\r\nHere is an overview of the settings that can be specified in the subprojects **prj.rake** file.<br/>\r\nSee the documentation of each setting for explanations.\r\n\r\n    # Project type, possible values are APP for applications, LIB for static libraries,\r\n    # SOLIB for shared objects and DISABLED if this project should be excluded from building.\r\n    PRJ_TYPE = 'DISABLED'\r\n\r\n    # Additional white space separated list of sub directories this project uses for finding source files.\r\n    # By default only sources in the projects top directory will be used for compilation.\r\n    ADD_SOURCE_DIRS = ''\r\n\r\n    # White space separated list of ignored source files. These will be excluded from compilation.\r\n    IGNORED_SOURCES = ''\r\n\r\n    # Additional white space separated list of sub directories this project uses for finding includes.\r\n    # By default the subdirectory 'include/' is always supposed.\r\n    ADD_INC_DIRS = ''\r\n\r\n    # White space separated list of test source directories.\r\n    TEST_SOURCE_DIRS = ''\r\n\r\n    # Additional white space separated list of CFLAGS. Used for all platforms.\r\n    # E.g. '-O3 -Wextra'\r\n    ADD_CFLAGS = ''\r\n\r\n    # Additional white space separated list of CXXFLAGS. Used for all platforms.\r\n    # E.g. '-O3 -Wextra'\r\n    ADD_CXXFLAGS = ''\r\n\r\n    # Additional white space separated list of libraries this project depends on. These can be either libraries provided\r\n    # from other subprojects or external libraries. In case of the former the include/ directory of that library\r\n    # is used for compilation as well. Used for all platforms.\r\n    # e.g. 'pthread rt m'\r\n    ADD_LIBS = ''\r\n\r\n    # Additional white space separated list of linker flags. Used for all platforms.\r\n    ADD_LDFLAGS = ''\r\n\r\n    # Set to 1 if you need Qt support. If enabled, all header files will be parsed for the\r\n    # declaration of the keyword Q_OBJECT and if found used as input for the moc compiler.\r\n    # By default QtCore and QtNetwork libs are enabled. If you need more Qt libraries,\r\n    # place them in ADD_LIBS variable.\r\n    USE_QT = 0\r\n\r\n    # White space separated list of ignored platforms, i.e. platforms this project will _not_ be compiled for.\r\n    # Possible values depend on your toolchain.\r\n    # E.g. 'arm-linux-gnueabi i686-linux-gnu'\r\n    IGNORED_PLATFORMS = ''\r\n\r\n\r\n### Pass Version String\r\nYou can pass a version string to all compiled files via environment variable SW_VERSION_ENV. The content of this environment\r\nvariable is passed to the build in CFLAGS/CXXFLAGS as -DPROGRAM_VERSION.\r\nThe default value in case no such environment variable is present is \"unversioned\".\r\n\r\n\r\n## Usage:\r\n    rake <target> <TOOLCHAIN_ENV=filename> <RELEASE=1>\r\n\r\n\r\nUse **` rake all`**<br/>\r\nto compile all applications and libraries\r\n\r\nUse **` rake app:all`**<br/>\r\nto compile only applications\r\n\r\nUse **` rake lib:all`**<br/>\r\nto compile only libraries\r\n\r\nUse **` rake test`**<br/>\r\nto execute all unit tests for applications/libraries\r\n\r\nUse **` rake -T `**<br/>\r\nfor a list of important targets with explanation.\r\n\r\nUse **` rake -T -A `**<br/>\r\nfor a list of all possible targets.\r\n\r\n\r\nIf no parameter given, **`rake all`** is assumed and the native compiler of the host system is used.<br/>\r\nFurthermore without any parameters, no compiler optimization settings are enabled.\r\n\r\nIf **`RELEASE`** is set to any value, compilation is executed with optimizations **and** debugging set to on.\r\n\r\nBy setting the variable **`TOOLCHAIN_ENV`**, the native toolchain settings can be overwritten with the environment file.<br/>\r\nfrom OpenEmbedded. This file is parsed by RakeOE and configures the specific toolchain settings.\r\n\r\n## Examples:\r\n\r\n1.     `rake`<br/>\r\n       Uses the native host toolchain as defined in rake/toolchain/environment-setup-native-linux-gnu\r\n\r\n1.     `rake all RELEASE=1`<br/>\r\n       Same as above but a release build will be triggered\r\n\r\n1.     `rake all TOOLCHAIN_ENV=/data/eldk-5.3/nitrogen/environment-setup-armv7a-vfp-neon-linux-gnueabi`<br/>\r\n       Cross compiles in debug mode with the cross compiler definitions found in provided ELDK-5.3 environment\r\n       file.<br/>In this particular case it would cross compile with the armv7a-vfp-neon gcc of a 5.3 ELDK\r\n\r\n\r\n\r\n## Shell autocompletion for rake:\r\n\r\nIf you'd like to save on key presses when trying to find out which rake task to run, add bash autocompletion for rake tasks like this:\r\n\r\n1. \tdownload https://github.com/mernen/completion-ruby/blob/master/completion-rake\r\n1.\tcopy downloaded file to /etc/bash_completion.d/rake\r\n\r\n\r\n* * *\r\n\r\n## Defaults:\r\n\r\n### Directory layout\r\nThe build systems assumes a directory layout similar to this:\r\n\r\n    project-root\r\n        ├── build\r\n        │   └── <platform>\r\n        │       ├── dbg\r\n        │       │   ├── apps\r\n        │       │   └── libs\r\n        │       └── release\r\n        │           ├── apps\r\n        │           └── libs\r\n        ├── rake\r\n        ├── Rakefile\r\n        └── src\r\n            ├── 3rdparty\r\n            │   └── CppUTest\r\n            │       └── prj.rake\r\n            ├── app\r\n            │   └── appA\r\n            │       └── prj.rake\r\n            └── lib\r\n                └── libB\r\n                    └── prj.rake\r\n\r\n####build/\r\nThe build sub directory contains all build artefacts. `<platform>` is the platform specific build directory. For each unique platform a new build<br/>\r\ndirectory is created. Inside those directories the directories `dbg` and `release` are created, depending on if you<br/>\r\nstarted a debug or a release build.<br/>\r\nDirectly therunder the directories `apps/` and `libs/` can be found in which either application or library binaries are built.<br/>\r\n\r\nWhenever you start a build with a different build configuration of either platform or debug mode, instead of overwriting<br/>\r\nbinaries from the previous build configuration a separate new directory is used.<br/>\r\n\r\nThe build directory setting can be changed via Rakefile.<br/>\r\n\r\n####rake/\r\nIn this directory most build system relevant files and classes can be found. Most are internal and typically will not<br/>\r\nbe changed by the user.\r\n\r\n####Rakefile\r\nThis file is the main Rakefile and will be automatically parsed by Rake. You can do configuration changes here like setting<br/>\r\npaths of source/build directories, file suffix assignments, etc.\r\n\r\n####src/\r\nThe RakeOE build system knows the build primitives *library* and *application*. It expects libraries and<br/>\r\napplications to be in separate source directories.<br/>\r\n\r\nBy default these are in `src/lib` and `src/app`. The directory `src/3rdparty/` is treated by RakeOE as a normal library<br/>\r\ndirectory and is meant as structural separation between 3rd party components that are not part of the platform SDK and<br/>\r\nproject specific libraries in `src/lib`.<br/>\r\nBy default `src/3rdparty/CppUTest` comes bundled with RakeOE as the default unit test framework.<br/>\r\nThe directory `src/app/appA` contains some user application project and `src/lib/libB` some user library project.<br/>\r\nAs mentioned above all those projects beneath `src/` have to contain a `prj.rake` file.\r\n\r\nThe source directory setting can be changed via Rakefile.<br/>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}